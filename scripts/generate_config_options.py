import enum
import math
import pathlib
import typing

from ipyniivue.constants import (
    _SNAKE_TO_CAMEL_OVERRIDES,
    DragMode,
    MultiplanarType,
    ShowRender,
    SliceType,
)

RENAME_OVERRIDES = {v: k for k, v in _SNAKE_TO_CAMEL_OVERRIDES.items()}


def camel_to_snake(name: str):
    return "".join(["_" + c.lower() if c.isupper() else c for c in name]).lstrip("_")


def type_hint(value: typing.Any):
    if isinstance(value, bool):
        return "t.Bool"
    elif isinstance(value, int):
        return "t.Int"
    elif isinstance(value, float):
        return "t.Float"
    elif isinstance(value, str):
        return "t.Unicode"
    elif isinstance(value, tuple):
        return "t.Tuple"
    elif isinstance(value, list):
        return "t.List"
    elif value is None:
        return "t.Any"
    elif isinstance(value, enum.Enum):
        enum_class_name = type(value).__name__
        return f"t.UseEnum({enum_class_name}"
    else:
        return "t.Any"


def get_default_value(value: typing.Any):
    if value == float("inf"):
        return 'float("inf")'
    if isinstance(value, float) and math.isnan(value):
        return 'float("nan")'
    if isinstance(value, enum.Enum):
        enum_class_name = type(value).__name__
        return f"{enum_class_name}.{value.name}"
    if isinstance(value, str):
        return f'"{value}"'
    return repr(value)


def generate_config_options(options: dict[str, typing.Any]):
    lines = [
        "# This file is automatically generated by scripts/generate_options_mixin.py",
        "# Do not edit this file directly",
        "",
        '"""Defines a class for NiiVue configuration options."""',
        "",
        "import traitlets as t",
        "from .constants import DragMode, MultiplanarType, ShowRender, SliceType",
        "",
        '__all__ = ["ConfigOptions", "CAMEL_TO_SNAKE", "SNAKE_TO_CAMEL"]',
        "",
        "class ConfigOptions(t.HasTraits):",
        '    """Configuration options for NiiVue."""',
        "",
        "    _parent = None",
        "",
    ]

    for option, value in options.items():
        # Convert camelCase to snake_case
        snake_name = RENAME_OVERRIDES.get(option, camel_to_snake(option))
        hint = type_hint(value)
        default_value = get_default_value(value)
        if "UseEnum" in hint:
            # For Enums, default_value is passed as a keyword argument
            lines.append(
                f"    {snake_name} = {hint}, "
                f"default_value={default_value}).tag(sync=False)"
            )
        else:
            lines.append(f"    {snake_name} = {hint}({default_value}).tag(sync=False)")
    lines.append("")

    # Add __init__ method
    lines.append("    def __init__(self, parent=None, **kwargs):")
    lines.append("        super().__init__(**kwargs)")
    lines.append("        self._parent = parent")
    lines.append("")

    # Add observe method
    option_names = [
        RENAME_OVERRIDES.get(option, camel_to_snake(option))
        for option in options.keys()
    ]

    lines.append("    _OBSERVED_TRAITS = (")
    for name in option_names:
        lines.append(f'        "{name}",')
    lines.append("    )")
    lines.append("")

    lines.append("    @t.observe(*_OBSERVED_TRAITS)")
    lines.append("    def _propagate_parent_change(self, change):")
    lines.append(
        "        if self._parent and callable("
        'getattr(self._parent, "_notify_opts_changed", None)):'
    )
    lines.append("            self._parent._notify_opts_changed()")
    lines.append("")

    option_names = options.keys()
    snake_case_names = [
        RENAME_OVERRIDES.get(option, camel_to_snake(option)) for option in option_names
    ]
    mappings = dict(zip(option_names, snake_case_names))
    lines.append("CAMEL_TO_SNAKE = {")
    for orig_name, snake_name in mappings.items():
        lines.append(f'    "{orig_name}": "{snake_name}",')
    lines.append("}")
    lines.append("")

    lines.append("SNAKE_TO_CAMEL = {v: k for k, v in CAMEL_TO_SNAKE.items()}")

    return "\n".join(lines)


if __name__ == "__main__":
    # Copied from niivue (should be able to automatically generate this)
    DEFAULT_OPTIONS = {
        "textHeight": 0.06,
        "colorbarHeight": 0.05,
        "crosshairWidth": 1,
        "crosshairGap": 0,
        "rulerWidth": 4,
        "show3Dcrosshair": False,
        "backColor": (0, 0, 0, 1),
        "crosshairColor": (1, 0, 0, 1),
        "fontColor": (0.5, 0.5, 0.5, 1),
        "selectionBoxColor": (1, 1, 1, 0.5),
        "clipPlaneColor": (0.7, 0, 0.7, 0.5),
        "rulerColor": (1, 0, 0, 0.8),
        "colorbarMargin": 0.05,
        "trustCalMinMax": True,
        "clipPlaneHotKey": "KeyC",
        "viewModeHotKey": "KeyV",
        "doubleTouchTimeout": 500,
        "longTouchTimeout": 1000,
        "keyDebounceTime": 50,
        "isNearestInterpolation": False,
        "isResizeCanvas": True,
        "isAtlasOutline": False,
        "atlasOutline": 0.0,
        "isRuler": False,
        "isColorbar": False,
        "isOrientCube": False,
        "multiplanarPadPixels": 0,
        "multiplanarForceRender": False,
        "multiplanarShowRender": ShowRender.AUTO,
        "isRadiologicalConvention": False,
        "meshThicknessOn2D": float("inf"),
        "dragMode": DragMode.CONTRAST,
        "yoke3Dto2DZoom": False,
        "isDepthPickMesh": False,
        "isCornerOrientationText": False,
        "sagittalNoseLeft": False,
        "isSliceMM": False,
        "isV1SliceShader": False,
        "isHighResolutionCapable": True,
        "logLevel": "info",
        "loadingText": "loading ...",
        "isForceMouseClickToVoxelCenters": False,
        "dragAndDropEnabled": True,
        "drawingEnabled": False,
        "penValue": 1.0,
        "floodFillNeighbors": 6,
        "isFilledPen": False,
        "thumbnail": "",
        "maxDrawUndoBitmaps": 8,
        "sliceType": SliceType.MULTIPLANAR,
        "meshXRay": 0.0,
        "isAntiAlias": None,
        "limitFrames4D": float("nan"),
        "isAdditiveBlend": False,
        "showLegend": True,
        "legendBackgroundColor": (0.3, 0.3, 0.3, 0.5),
        "legendTextColor": (1.0, 1.0, 1.0, 1.0),
        "multiplanarLayout": MultiplanarType.AUTO,
        "renderOverlayBlend": 1.0,
        "sliceMosaicString": "",
        "centerMosaic": False,
        "gradientAmount": 0.0,
        "gradientOpacity": 0.0,
        "forceDevicePixelRatio": 0,
        "clickToSegment": False,
        "clickToSegmentAutoIntensity": False,
        "clickToSegmentIs2D": False,
    }
    code = generate_config_options(DEFAULT_OPTIONS)
    loc = pathlib.Path(__file__).parent / "../src/ipyniivue/config_options.py"
    loc.write_text(code)
