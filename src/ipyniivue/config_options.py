# This file is automatically generated by scripts/generate_options_mixin.py
# Do not edit this file directly

"""Defines a class for NiiVue configuration options."""

import traitlets as t

from .constants import DragMode, MultiplanarType, ShowRender, SliceType

__all__ = ["CAMEL_TO_SNAKE", "SNAKE_TO_CAMEL", "ConfigOptions"]


class ConfigOptions(t.HasTraits):
    """Configuration options for NiiVue."""

    _parent = None

    text_height = t.Float(0.06).tag(sync=False)
    colorbar_height = t.Float(0.05).tag(sync=False)
    crosshair_width = t.Int(1).tag(sync=False)
    crosshair_gap = t.Int(0).tag(sync=False)
    ruler_width = t.Int(4).tag(sync=False)
    show_3d_crosshair = t.Bool(False).tag(sync=False)
    back_color = t.Tuple((0, 0, 0, 1)).tag(sync=False)
    crosshair_color = t.Tuple((1, 0, 0, 1)).tag(sync=False)
    font_color = t.Tuple((0.5, 0.5, 0.5, 1)).tag(sync=False)
    selection_box_color = t.Tuple((1, 1, 1, 0.5)).tag(sync=False)
    clip_plane_color = t.Tuple((0.7, 0, 0.7, 0.5)).tag(sync=False)
    ruler_color = t.Tuple((1, 0, 0, 0.8)).tag(sync=False)
    colorbar_margin = t.Float(0.05).tag(sync=False)
    trust_cal_min_max = t.Bool(True).tag(sync=False)
    clip_plane_hot_key = t.Unicode("KeyC").tag(sync=False)
    view_mode_hot_key = t.Unicode("KeyV").tag(sync=False)
    double_touch_timeout = t.Int(500).tag(sync=False)
    long_touch_timeout = t.Int(1000).tag(sync=False)
    key_debounce_time = t.Int(50).tag(sync=False)
    is_nearest_interpolation = t.Bool(False).tag(sync=False)
    is_resize_canvas = t.Bool(True).tag(sync=False)
    is_atlas_outline = t.Bool(False).tag(sync=False)
    atlas_outline = t.Float(0.0).tag(sync=False)
    is_ruler = t.Bool(False).tag(sync=False)
    is_colorbar = t.Bool(False).tag(sync=False)
    is_orient_cube = t.Bool(False).tag(sync=False)
    multiplanar_pad_pixels = t.Int(0).tag(sync=False)
    multiplanar_force_render = t.Bool(False).tag(sync=False)
    multiplanar_show_render = t.UseEnum(ShowRender, default_value=ShowRender.AUTO).tag(
        sync=False
    )
    is_radiological_convention = t.Bool(False).tag(sync=False)
    mesh_thickness_on_2d = t.Float(float("inf")).tag(sync=False)
    drag_mode = t.UseEnum(DragMode, default_value=DragMode.CONTRAST).tag(sync=False)
    yoke_3d_to_2d_zoom = t.Bool(False).tag(sync=False)
    is_depth_pick_mesh = t.Bool(False).tag(sync=False)
    is_corner_orientation_text = t.Bool(False).tag(sync=False)
    sagittal_nose_left = t.Bool(False).tag(sync=False)
    is_slice_mm = t.Bool(False).tag(sync=False)
    is_v1_slice_shader = t.Bool(False).tag(sync=False)
    is_high_resolution_capable = t.Bool(True).tag(sync=False)
    log_level = t.Unicode("info").tag(sync=False)
    loading_text = t.Unicode("loading ...").tag(sync=False)
    is_force_mouse_click_to_voxel_centers = t.Bool(False).tag(sync=False)
    drag_and_drop_enabled = t.Bool(True).tag(sync=False)
    drawing_enabled = t.Bool(False).tag(sync=False)
    pen_value = t.Float(1.0).tag(sync=False)
    flood_fill_neighbors = t.Int(6).tag(sync=False)
    is_filled_pen = t.Bool(False).tag(sync=False)
    thumbnail = t.Unicode("").tag(sync=False)
    max_draw_undo_bitmaps = t.Int(8).tag(sync=False)
    slice_type = t.UseEnum(SliceType, default_value=SliceType.MULTIPLANAR).tag(
        sync=False
    )
    mesh_x_ray = t.Float(0.0).tag(sync=False)
    is_anti_alias = t.Any(None).tag(sync=False)
    limit_frames_4d = t.Float(float("nan")).tag(sync=False)
    is_additive_blend = t.Bool(False).tag(sync=False)
    show_legend = t.Bool(True).tag(sync=False)
    legend_background_color = t.Tuple((0.3, 0.3, 0.3, 0.5)).tag(sync=False)
    legend_text_color = t.Tuple((1.0, 1.0, 1.0, 1.0)).tag(sync=False)
    multiplanar_layout = t.UseEnum(
        MultiplanarType, default_value=MultiplanarType.AUTO
    ).tag(sync=False)
    render_overlay_blend = t.Float(1.0).tag(sync=False)
    slice_mosaic_string = t.Unicode("").tag(sync=False)
    center_mosaic = t.Bool(False).tag(sync=False)
    gradient_amount = t.Float(0.0).tag(sync=False)
    gradient_opacity = t.Float(0.0).tag(sync=False)
    force_device_pixel_ratio = t.Int(0).tag(sync=False)
    click_to_segment = t.Bool(False).tag(sync=False)
    click_to_segment_auto_intensity = t.Bool(False).tag(sync=False)
    click_to_segment_is_2d = t.Bool(False).tag(sync=False)

    def __init__(self, parent=None, **kwargs):
        super().__init__(**kwargs)
        self._parent = parent

    _OBSERVED_TRAITS = (
        "text_height",
        "colorbar_height",
        "crosshair_width",
        "crosshair_gap",
        "ruler_width",
        "show_3d_crosshair",
        "back_color",
        "crosshair_color",
        "font_color",
        "selection_box_color",
        "clip_plane_color",
        "ruler_color",
        "colorbar_margin",
        "trust_cal_min_max",
        "clip_plane_hot_key",
        "view_mode_hot_key",
        "double_touch_timeout",
        "long_touch_timeout",
        "key_debounce_time",
        "is_nearest_interpolation",
        "is_resize_canvas",
        "is_atlas_outline",
        "atlas_outline",
        "is_ruler",
        "is_colorbar",
        "is_orient_cube",
        "multiplanar_pad_pixels",
        "multiplanar_force_render",
        "multiplanar_show_render",
        "is_radiological_convention",
        "mesh_thickness_on_2d",
        "drag_mode",
        "yoke_3d_to_2d_zoom",
        "is_depth_pick_mesh",
        "is_corner_orientation_text",
        "sagittal_nose_left",
        "is_slice_mm",
        "is_v1_slice_shader",
        "is_high_resolution_capable",
        "log_level",
        "loading_text",
        "is_force_mouse_click_to_voxel_centers",
        "drag_and_drop_enabled",
        "drawing_enabled",
        "pen_value",
        "flood_fill_neighbors",
        "is_filled_pen",
        "thumbnail",
        "max_draw_undo_bitmaps",
        "slice_type",
        "mesh_x_ray",
        "is_anti_alias",
        "limit_frames_4d",
        "is_additive_blend",
        "show_legend",
        "legend_background_color",
        "legend_text_color",
        "multiplanar_layout",
        "render_overlay_blend",
        "slice_mosaic_string",
        "center_mosaic",
        "gradient_amount",
        "gradient_opacity",
        "force_device_pixel_ratio",
        "click_to_segment",
        "click_to_segment_auto_intensity",
        "click_to_segment_is_2d",
    )

    @t.observe(*_OBSERVED_TRAITS)
    def _propagate_parent_change(self, change):
        if self._parent and callable(
            getattr(self._parent, "_notify_opts_changed", None)
        ):
            self._parent._notify_opts_changed()


CAMEL_TO_SNAKE = {
    "textHeight": "text_height",
    "colorbarHeight": "colorbar_height",
    "crosshairWidth": "crosshair_width",
    "crosshairGap": "crosshair_gap",
    "rulerWidth": "ruler_width",
    "show3Dcrosshair": "show_3d_crosshair",
    "backColor": "back_color",
    "crosshairColor": "crosshair_color",
    "fontColor": "font_color",
    "selectionBoxColor": "selection_box_color",
    "clipPlaneColor": "clip_plane_color",
    "rulerColor": "ruler_color",
    "colorbarMargin": "colorbar_margin",
    "trustCalMinMax": "trust_cal_min_max",
    "clipPlaneHotKey": "clip_plane_hot_key",
    "viewModeHotKey": "view_mode_hot_key",
    "doubleTouchTimeout": "double_touch_timeout",
    "longTouchTimeout": "long_touch_timeout",
    "keyDebounceTime": "key_debounce_time",
    "isNearestInterpolation": "is_nearest_interpolation",
    "isResizeCanvas": "is_resize_canvas",
    "isAtlasOutline": "is_atlas_outline",
    "atlasOutline": "atlas_outline",
    "isRuler": "is_ruler",
    "isColorbar": "is_colorbar",
    "isOrientCube": "is_orient_cube",
    "multiplanarPadPixels": "multiplanar_pad_pixels",
    "multiplanarForceRender": "multiplanar_force_render",
    "multiplanarShowRender": "multiplanar_show_render",
    "isRadiologicalConvention": "is_radiological_convention",
    "meshThicknessOn2D": "mesh_thickness_on_2d",
    "dragMode": "drag_mode",
    "yoke3Dto2DZoom": "yoke_3d_to_2d_zoom",
    "isDepthPickMesh": "is_depth_pick_mesh",
    "isCornerOrientationText": "is_corner_orientation_text",
    "sagittalNoseLeft": "sagittal_nose_left",
    "isSliceMM": "is_slice_mm",
    "isV1SliceShader": "is_v1_slice_shader",
    "isHighResolutionCapable": "is_high_resolution_capable",
    "logLevel": "log_level",
    "loadingText": "loading_text",
    "isForceMouseClickToVoxelCenters": "is_force_mouse_click_to_voxel_centers",
    "dragAndDropEnabled": "drag_and_drop_enabled",
    "drawingEnabled": "drawing_enabled",
    "penValue": "pen_value",
    "floodFillNeighbors": "flood_fill_neighbors",
    "isFilledPen": "is_filled_pen",
    "thumbnail": "thumbnail",
    "maxDrawUndoBitmaps": "max_draw_undo_bitmaps",
    "sliceType": "slice_type",
    "meshXRay": "mesh_x_ray",
    "isAntiAlias": "is_anti_alias",
    "limitFrames4D": "limit_frames_4d",
    "isAdditiveBlend": "is_additive_blend",
    "showLegend": "show_legend",
    "legendBackgroundColor": "legend_background_color",
    "legendTextColor": "legend_text_color",
    "multiplanarLayout": "multiplanar_layout",
    "renderOverlayBlend": "render_overlay_blend",
    "sliceMosaicString": "slice_mosaic_string",
    "centerMosaic": "center_mosaic",
    "gradientAmount": "gradient_amount",
    "gradientOpacity": "gradient_opacity",
    "forceDevicePixelRatio": "force_device_pixel_ratio",
    "clickToSegment": "click_to_segment",
    "clickToSegmentAutoIntensity": "click_to_segment_auto_intensity",
    "clickToSegmentIs2D": "click_to_segment_is_2d",
}

SNAKE_TO_CAMEL = {v: k for k, v in CAMEL_TO_SNAKE.items()}
